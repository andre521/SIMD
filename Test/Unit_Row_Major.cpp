//----------------------------------------------------------------------------
// Copyright Ed Keenan 2017
// Optimized C++
//----------------------------------------------------------------------------

#include "UnitTest.h"

#include "Vect4D.h"
#include "Vect4D_SIMD.h"
#include "Matrix.h"
#include "Matrix_SIMD.h"

#define f_eq(A,B) (  fabs(A - B) < 0.001f)
#define V_EQ(A,B) ((f_eq(A.x,B.x) ) && ( f_eq(A.y, B.y)) && (f_eq(A.z,B.z)) && (f_eq(A.w,B.w) ))

TEST(rowMajor, SIMD_Tests)
{
	{
		Matrix Rx(Vect4D(1.000000f, 0.000000f, 0.000000f, 0.000000f),
				  Vect4D(0.000000f, -0.500000f, 0.866025f, 0.000000f),
				  Vect4D(0.000000f, -0.866025f, -0.500000f, 0.000000f),
				  Vect4D(0.000000f, 0.000000f, 0.000000f, 1.000000f));

		Matrix Ry(Vect4D(0.707107f, 0.000000f, -0.707107f, 0.000000f),
				  Vect4D(0.000000f, 1.000000f, 0.000000f, 0.000000f),
				  Vect4D(0.707107f, 0.000000f, 0.707107f, 0.000000f),
				  Vect4D(0.000000f, 0.000000f, 0.000000f, 1.000000f));

		Matrix Rz(Vect4D(0.500000f, -0.866025f, 0.000000f, 0.000000f),
				  Vect4D(0.866025f, 0.500000f, 0.000000f, 0.000000f),
				  Vect4D(0.000000f, 0.000000f, 1.000000f, 0.000000f),
				  Vect4D(0.000000f, 0.000000f, 0.000000f, 1.000000f));

		Matrix  T(Vect4D(1.000000f, 0.000000f, 0.000000f, 0.000000f),
				  Vect4D(0.000000f, 1.000000f, 0.000000f, 0.000000f),
				  Vect4D(0.000000f, 0.000000f, 1.000000f, 0.000000f),
				  Vect4D(4.000000f, 5.000000f, 6.000000f, 1.000000f));

		Matrix  S(Vect4D(1.000000f, 0.000000f, 0.000000f, 0.200000f),
				  Vect4D(0.000000f, 2.000000f, 0.000000f, 0.300000f),
				  Vect4D(0.000000f, 0.000000f, 0.500000f, 0.500000f),
				  Vect4D(0.000000f, 0.000000f, 0.000000f, 0.130000f));

		Vect4D  v(0.500000f, 0.600000f, 0.700000f, 0.900000f);
		Vect4D  vOut;

		vOut = v * S * Rx *Ry * Rz * T;

		CHECK(S.m0 == 1.0f);

		Vect4D Ans;
		Ans = Vect4D(2.688213f, 2.448028f, 4.739550f, 0.747000f);

		CHECK(V_EQ(vOut, Ans));
	}
	{
		Matrix_SIMD Rx(Vect4D_SIMD(1.000000f, 0.000000f, 0.000000f, 0.000000f),
					   Vect4D_SIMD(0.000000f, -0.500000f, 0.866025f, 0.000000f),
					   Vect4D_SIMD(0.000000f, -0.866025f, -0.500000f, 0.000000f),
					   Vect4D_SIMD(0.000000f, 0.000000f, 0.000000f, 1.000000f));

		Matrix_SIMD Ry(Vect4D_SIMD(0.707107f, 0.000000f, -0.707107f, 0.000000f),
					   Vect4D_SIMD(0.000000f, 1.000000f, 0.000000f, 0.000000f),
					   Vect4D_SIMD(0.707107f, 0.000000f, 0.707107f, 0.000000f),
					   Vect4D_SIMD(0.000000f, 0.000000f, 0.000000f, 1.000000f));

		Matrix_SIMD Rz(Vect4D_SIMD(0.500000f, -0.866025f, 0.000000f, 0.000000f),
					   Vect4D_SIMD(0.866025f, 0.500000f, 0.000000f, 0.000000f),
					   Vect4D_SIMD(0.000000f, 0.000000f, 1.000000f, 0.000000f),
					   Vect4D_SIMD(0.000000f, 0.000000f, 0.000000f, 1.000000f));

		Matrix_SIMD  T(Vect4D_SIMD(1.000000f, 0.000000f, 0.000000f, 0.000000f),
					   Vect4D_SIMD(0.000000f, 1.000000f, 0.000000f, 0.000000f),
					   Vect4D_SIMD(0.000000f, 0.000000f, 1.000000f, 0.000000f),
					   Vect4D_SIMD(4.000000f, 5.000000f, 6.000000f, 1.000000f));

		Matrix_SIMD  S(Vect4D_SIMD(1.000000f, 0.000000f, 0.000000f, 0.200000f),
					   Vect4D_SIMD(0.000000f, 2.000000f, 0.000000f, 0.300000f),
					   Vect4D_SIMD(0.000000f, 0.000000f, 0.500000f, 0.500000f),
					   Vect4D_SIMD(0.000000f, 0.000000f, 0.000000f, 0.130000f));

		Vect4D_SIMD  v(0.500000f, 0.600000f, 0.700000f, 0.900000f);
		Vect4D_SIMD  vOut;

		vOut = v * S * Rx *Ry * Rz * T;

		Vect4D_SIMD Ans;
		Ans = Vect4D_SIMD(2.688213f, 2.448028f, 4.739550f, 0.747000f);

		CHECK(V_EQ(vOut, Ans));
	}
}

// ---  End of File ---------------
